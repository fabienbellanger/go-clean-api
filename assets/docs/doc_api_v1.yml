openapi: '3.0.2'
info:
  title: Go Clean API
  version: '1.0'
  description: REST API for Go using Clean Architecture
  contact:
    name: Fabien Bellanger
    email: valentil@gmail.com
  license:
    name: MIT
    url: https://github.com/fabienbellanger/go-clean-api/blob/main/LICENSE

servers:
  - url: http://localhost:{port}/api/v1
    description: Local server
    variables:
      port:
        enum:
          - "3003"
        default: "3003"
  - url: https://<base URL>/api/v1
    description: Production server

paths:
  /token:
    post:
      description: Authenticate a user
      tags:
        - "User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccessTokenRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccessTokenResponse'
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '500':
            $ref: "#/components/responses/InternalServerError"

  /users:
    post:
      summary: ""
      description: User creation
      tags:
        - "Users"
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreationResponse'
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/InternalServerError"
  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    BadRequest:
      description: Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
        text/plain:
          schema:
            type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    MethodNotAllowed:
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
  schemas:
    ResponseError:
      type: object
      properties:
        code:
          type: integer
          minimum: 100
          maximum: 527
        message:
          type: string
      required:
        - code
        - message
    GetAccessTokenRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
      example:
        email: john.doe@test.com
        password: "00000000"
      required:
        - email
        - password
    GetAccessTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Access token
        access_token_expired_at:
          type: string
          format: date-time
          description: Access token expiration date time
      required:
        - access_token
        - access_token_expired_at
    UserCreationRequest:
      type: object
      properties:
        lastname:
          type: string
        firstname:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
      required:
        - lastname
        - firstname
        - username
        - password
    UserCreationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        lastname:
          type: string
        firstname:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - lastname
        - firstname
        - email
        - created_at
        - updated_at